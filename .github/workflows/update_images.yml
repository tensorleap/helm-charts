name: Update Images

on:
  workflow_dispatch:

jobs:
  wait-for-stable-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - web-ui
    steps:
      - name: Wait for build to succeed
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: wait-for-build
        with:
          token: ${{ secrets.TENSORLEAP_OPS_GITHUB_TOKEN }}
          repo: ${{ matrix.repo }}
          ref: master
          checkName: tag-public-ecr-image-as-stable
  update-images:
    runs-on: ubuntu-latest
    needs: wait-for-stable-images

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TENSORLEAP_OPS_GITHUB_TOKEN }}
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - run: npm install js-yaml
      - name: Update charts
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TENSORLEAP_OPS_GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            let updated = false;
            let bumpEngineChart = false;
            const chartsPath = 'charts/tensorleap/charts';

            async function getImageTag(github, repo) {
              const {
                data: { sha },
              } = await github.rest.repos.getCommit({
                owner: 'tensorleap',
                repo,
                ref: 'master',
              });
              return `master-${sha.substring(0, 8)}`;
            }

            for (let repo of ['engine', 'node-server', 'web-ui']) {
              const imageTag = await getImageTag(github, repo);
              const valuesPath = `${chartsPath}/${repo}/values.yaml`;
              const valuesFile = fs.readFileSync(valuesPath, 'utf-8');
              const { image_tag: currentImageTag } = yaml.load(valuesFile);
              if (currentImageTag !== imageTag) {
                const updatedValues = valuesFile.replace(
                  `image_tag: ${currentImageTag}`,
                  `image_tag: ${imageTag}`,
                );
                fs.writeFileSync(valuesPath, updatedValues);

                bumpChart(repo);
                if (repo === 'engine') {
                  bumpEngineChart = true;
                }
                fs.writeFileSync(
                  `${repo}-latest-image`,
                  `public.ecr.aws/tensorleap/${repo}:${imageTag}`,
                );

                updated = true;
              }
            }

            const imageTag = await getImageTag(github, 'pippin');
            const valuesPath = `${chartsPath}/engine/values.yaml`;
            const valuesFile = fs.readFileSync(valuesPath, 'utf-8');
            const { dependencies_image_tag: currentImageTag } = yaml.load(valuesFile);
            if (currentImageTag !== imageTag) {
              const updatedValues = valuesFile.replace(
                `dependencies_image_tag: ${currentImageTag}`,
                `dependencies_image_tag: ${imageTag}`,
              );
              fs.writeFileSync(valuesPath, updatedValues);

              if (!bumpEngineChart) {
                bumpChart('engine');
              }
              fs.writeFileSync(
                `pippin-latest-image`,
                `public.ecr.aws/tensorleap/pippin:${imageTag}`,
              );

              updated = true;
            }

            if (updated) {
              const chartPath = 'charts/tensorleap/Chart.yaml';
              const chartFile = fs.readFileSync(chartPath, 'utf-8');
              const { version } = yaml.load(chartFile);
              const versionParts = version.split('.');
              versionParts[2] = (parseInt(versionParts[2]) + 1).toString();
              const newVersion = versionParts.join('.');
              const updatedChart = chartFile.replace(
                `version: ${version}`,
                `version: ${newVersion}`,
              );
              fs.writeFileSync(chartPath, updatedChart);
            }
            function bumpChart(repo) {
              const chartPath = `${chartsPath}/${repo}/Chart.yaml`;
              const chartFile = fs.readFileSync(chartPath, 'utf-8');
              const { version } = yaml.load(chartFile);
              const versionParts = version.split('.');
              versionParts[2] = (parseInt(versionParts[2]) + 1).toString();
              const newVersion = versionParts.join('.');
              const updatedChart = chartFile.replace(
                `version: ${version}`,
                `version: ${newVersion}`,
              );
              fs.writeFileSync(chartPath, updatedChart);
            }

      - name: Extract image names
        run: |
          make build-helm
          make update-images
      - name: Commit
        uses: EndBug/add-and-commit@v9
        with:
          message: "Update image tags"
