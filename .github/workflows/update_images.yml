name: Update Images

on:
  workflow_dispatch:

jobs:
  wait-for-stable-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - engine
          - web-ui
          - node-server
    steps:
      - name: Wait for build to succeed
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: wait-for-build
        with:
          token: ${{ secrets.TENSORLEAP_OPS_GITHUB_TOKEN }}
          repo: ${{ matrix.repo }}
          ref: master
          checkName: tag-public-ecr-image-as-stable

  update-images:
    runs-on: ubuntu-latest
    needs: wait-for-stable-images

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TENSORLEAP_OPS_GITHUB_TOKEN }}
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - run: npm install js-yaml
      - name: Update charts
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TENSORLEAP_OPS_GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            let updated = false;
            const chartsPath = 'charts/tensorleap/charts';
            for (let repo of ['engine', 'node-server', 'web-ui']) {
              const { data: { sha } } = await github.rest.repos.getCommit({
                owner: 'tensorleap',
                repo,
                ref: 'master'
              });
              const imageTag = `master-${sha.substring(0,8)}-stable`;
              const valuesPath = `${chartsPath}/${repo}/values.yaml`;
              const valuesFile = fs.readFileSync(valuesPath, 'utf-8');
              const { image_tag: currentImageTag } = yaml.load(valuesFile);
              if (currentImageTag !== imageTag) {
                const updatedValues = valuesFile.replace(`image_tag: ${currentImageTag}`, `image_tag: ${imageTag}`);
                fs.writeFileSync(valuesPath, updatedValues);

                const chartPath = `${chartsPath}/${repo}/Chart.yaml`;
                const chartFile = fs.readFileSync(chartPath, 'utf-8');
                const { version } = yaml.load(chartFile);
                const versionParts = version.split('.')
                versionParts[2] = (parseInt(versionParts[2])+1).toString();
                const newVersion = versionParts.join('.');
                const updatedChart = chartFile.replace(`version: ${version}`, `version: ${newVersion}`);
                fs.writeFileSync(chartPath, updatedChart);
                fs.writeFileSync(`${repo}-latest-image`, `public.ecr.aws/g9h8h3m5/${repo}:${imageTag}`)

                updated = true;
              }
              if (updated) {
                const chartPath = 'charts/tensorleap/Chart.yaml';
                const chartFile = fs.readFileSync(chartPath, 'utf-8');
                const { version } = yaml.load(chartFile);
                const versionParts = version.split('.')
                versionParts[2] = (parseInt(versionParts[2])+1).toString();
                const newVersion = versionParts.join('.');
                const updatedChart = chartFile.replace(`version: ${version}`, `version: ${newVersion}`);
                fs.writeFileSync(chartPath, updatedChart);
              }
            }
      - name: Extract image names
        run: |
          helm repo add nginx https://kubernetes.github.io/ingress-nginx
          helm repo add elastic https://helm.elastic.co
          helm repo add minio https://charts.min.io
          helm dependency build ./charts/tensorleap
          rm ./charts/tensorleap/Chart.lock
          helm dependency build ./charts/tensorleap-infra
          rm ./charts/tensorleap-infra/Chart.lock
          make update-images
      - name: Commit
        uses: EndBug/add-and-commit@v9
        with:
          message: "Update image tags"
