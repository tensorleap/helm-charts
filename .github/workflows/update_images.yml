name: Update Images

on:
  workflow_dispatch:

jobs:
  wait-for-stable-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - engine
          - web-ui
          - node-server
    steps:
      - name: Wait for build to succeed
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: wait-for-build
        with:
          token: ${{ secrets.TENSORLEAP_OPS_GITHUB_TOKEN }}
          repo: ${{ matrix.repo }}
          ref: master
          checkName: mark-stable

  update-images:
    runs-on: ubuntu-latest
    needs: wait-for-stable-images

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TENSORLEAP_OPS_GITHUB_TOKEN }}
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - uses: fabasoad/yaml-json-xml-converter-action@main
        id: engine-values
        with:
          path: "charts/engine/values.yaml"
          from: "yaml"
          to: "json"
      - uses: fabasoad/yaml-json-xml-converter-action@main
        id: node-server-values
        with:
          path: "charts/node-server/values.yaml"
          from: "yaml"
          to: "json"
      - uses: fabasoad/yaml-json-xml-converter-action@main
        id: web-ui-values
        with:
          path: "charts/web-ui/values.yaml"
          from: "yaml"
          to: "json"
      - uses: fabasoad/yaml-json-xml-converter-action@main
        id: engine-chart
        with:
          path: "charts/engine/Chart.yaml"
          from: "yaml"
          to: "json"
      - uses: fabasoad/yaml-json-xml-converter-action@main
        id: node-server-chart
        with:
          path: "charts/node-server/Chart.yaml"
          from: "yaml"
          to: "json"
      - uses: fabasoad/yaml-json-xml-converter-action@main
        id: web-ui-chart
        with:
          path: "charts/web-ui/Chart.yaml"
          from: "yaml"
          to: "json"
      - uses: fabasoad/yaml-json-xml-converter-action@main
        id: tensorleap-chart
        with:
          path: "charts/tensorleap/Chart.yaml"
          from: "yaml"
          to: "json"
      - name: Update charts
        uses: actions/github-script@v6
        env:
          ENGINE_VALUES: ${{steps.engine-values.outputs.data}}
          NODE_SERVER_VALUES: ${{steps.node-server-values.outputs.data}}
          WEB_UI_VALUES: ${{steps.web-ui-values.outputs.data}}
          ENGINE_CHART: ${{steps.engine-chart.outputs.data}}
          NODE_SERVER_CHART: ${{steps.node-server-chart.outputs.data}}
          WEB_UI_CHART: ${{steps.web-ui-chart.outputs.data}}
          TENSORLEAP_CHART: ${{steps.tensorleap-chart.outputs.data}}
        with:
          github-token: ${{ secrets.TENSORLEAP_OPS_GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let updated = false;
            for (let repo of ['engine', 'node-server', 'web-ui']) {
              const { data: { sha } } = await github.rest.repos.getCommit({
                owner: 'tensorleap',
                repo,
                ref: 'master'
              });
              const imageTag = `master-${sha.substring(0,8)}-stable`;
              const { image_tag: currentImageTag } = JSON.parse(process.env[`${repo.replaceAll('-', '_').toUpperCase()}_VALUES`]);
              if (currentImageTag !== imageTag) {
                const valuesPath = `charts/${repo}/values.yaml`;
                const updateValues = fs.readFileSync(valuesPath, 'utf-8').replace(`image_tag: ${currentImageTag}`, `image_tag: ${imageTag}`);
                fs.writeFileSync(valuesPath, updateValues);

                const { version } = JSON.parse(process.env[`${repo.replaceAll('-', '_').toUpperCase()}_CHART`]);
                const versionParts = version.split('.')
                versionParts[2] = (parseInt(versionParts[2])+1).toString();
                const newVersion = versionParts.join('.');
                const chartPath = `charts/${repo}/Chart.yaml`;
                const updatedChart = fs.readFileSync(chartPath, 'utf-8').replace(`version: ${version}`, `version: ${newVersion}`);
                fs.writeFileSync(chartPath, updatedChart);
                fs.writeFileSync(`${repo}-latest-image`, `us-central1-docker.pkg.dev/tensorleap/main/${repo}:${imageTag}`)

                updated = true;
              }
              if (updated) {
                const { version } = JSON.parse(process.env.TENSORLEAP_CHART);
                const versionParts = version.split('.')
                versionParts[2] = (parseInt(versionParts[2])+1).toString();
                const newVersion = versionParts.join('.');
                const chartPath = 'charts/tensorleap/Chart.yaml';
                const updatedChart = fs.readFileSync(chartPath, 'utf-8').replace(`version: ${version}`, `version: ${newVersion}`);
                fs.writeFileSync(chartPath, updatedChart);
              }
            }
      - name: Extract image names
        run: |
          helm repo add nginx https://kubernetes.github.io/ingress-nginx
          helm repo add elastic https://helm.elastic.co
          helm repo add minio https://charts.min.io
          helm dependency build ./charts/tensorleap
          rm ./charts/tensorleap/Chart.lock
          helm template ./charts/tensorleap \
            | grep 'image: ' \
            | sed 's/.*: //;s/\"//g' \
            | sort \
            | uniq > images.txt
      - name: Add k3s images to list
        run: |
          k3s_version=$(grep 'image:' ./config/k3d-config.yaml | sed 's/.*://;s/-/+/')
          curl -L --fail https://github.com/k3s-io/k3s/releases/download/$k3s_version/k3s-images.txt \
            >> images.txt
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.OPS_SERVICE_ACCOUNT_KEY }}
      - name: Set up GCloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Configure docker
        shell: bash
        run: gcloud auth configure-docker us-central1-docker.pkg.dev
      - name: Verify images are in registry
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const TARGET_REPO='us-central1-docker.pkg.dev/tensorleap/main/';
            const images = fs.readFileSync('images.txt', 'utf-8')
              .split('\n')
              .filter(image => image.length > 0);

            for (const image of images) {
              if (image.startsWith(TARGET_REPO)) {
                try {
                  await exec.exec(`skopeo inspect docker://${image}`);
                  console.log(`Image "${image}" exists!`);
                } catch (err) {
                  throw new Error(`image not found: "${image}" ${err}`);
                }
              } else {
                const targetImage = image.replace(/[^\/]*\//, TARGET_REPO);
                try {
                  await exec.exec(`skopeo inspect docker://${targetImage}`);
                  console.log(`Image "${targetImage}" exists!`)
                } catch (_expected_error) {
                  try {
                    await exec.exec(`skopeo copy --all docker://${image} docker://${targetImage}`);
                  } catch (err)   {
                    throw new Error(`Failed to copy image: "${image}" ${err}`);
                  }
                }
              }
            }
      - name: Commit
        uses: EndBug/add-and-commit@v9
        with:
          message: "Update image tags"
