{{ if .Values.global.elasticsearch.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-master-config
data:
  elasticsearch.yml: |
    node.store.allow_mmap: false
    discovery.type: single-node
---
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
spec:
  type: ClusterIP
  selector:
    app: elasticsearch-master
  ports:
    - name: http
      protocol: TCP
      port: 9200
    - name: transport
      protocol: TCP
      port: 9300
---
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    app: elasticsearch-master
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
    - name: http
      port: 9200
    - name: transport
      port: 9300
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "7"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: elasticsearch-master
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-master
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 30Gi
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        release: "release-name"
        chart: "elasticsearch"
        app: "elasticsearch-master"
      annotations:
        configchecksum: bca1a169b3f03d2408690204b93f3478382ab34b5e127e19093e8899dc2066e
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - elasticsearch-master
      terminationGracePeriodSeconds: 120
      volumes:
        - name: esconfig
          configMap:
            name: elasticsearch-master-config
      enableServiceLinks: true
      securityContext:
        runAsUser: 0
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.8.1
          imagePullPolicy: IfNotPresent
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                    # Exit if ELASTIC_PASSWORD in unset
                    if [ -z "${ELASTIC_PASSWORD}" ]; then
                      echo "ELASTIC_PASSWORD variable is missing, exiting"
                      exit 1
                    fi

                    # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                    # Once it has started only check that the node itself is responding
                    START_FILE=/tmp/.es_start_file

                    # Disable nss cache to avoid filling dentry cache when calling curl
                    # This is required with Elasticsearch Docker using nss < 3.52
                    export NSS_SDB_USE_CACHE=no

                    http () {
                      local path="${1}"
                      local args="${2}"
                      set -- -XGET -s

                      if [ "$args" != "" ]; then
                        set -- "$@" $args
                      fi

                      set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                      curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                    }

                    if [ -f "${START_FILE}" ]; then
                      echo 'Elasticsearch is already running, lets check the node is healthy'
                      HTTP_CODE=$(http "/" "-w %{http_code}")
                      RC=$?
                      if [[ ${RC} -ne 0 ]]; then
                        echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                        exit ${RC}
                      fi
                      # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                      if [[ ${HTTP_CODE} == "200" ]]; then
                        exit 0
                      elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                        exit 0
                      else
                        echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                        exit 1
                      fi

                    else
                      echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                      if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                        touch ${START_FILE}
                        exit 0
                      else
                        echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                        exit 1
                      fi
                    fi
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: discovery.seed_hosts
              value: "elasticsearch-master-headless"
            - name: cluster.name
              value: "elasticsearch"
            - name: network.host
              value: "0.0.0.0"
            - name: ES_JAVA_OPTS
              value: "-Dlog4j2.formatMsgNoLookups=true"
            - name: node.data
              value: "true"
            - name: node.ingest
              value: "true"
            - name: node.master
              value: "true"
            - name: node.remote_cluster_client
              value: "true"
          volumeMounts:
            - name: elasticsearch-master
              mountPath: /usr/share/elasticsearch/data
            - name: esconfig
              mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
              subPath: elasticsearch.yml
{{ end }}
